# -*- coding: utf-8 -*-
"""Directing_cstaba.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GXr51z1ZrqvTmmoGCaL0V8wCjE18wlNu

# Directing Customers to Subscription Through App Behavior Analysis


In marketing analysis, the Machine Learning technics can provide a helpful tool. For example, companies that have mobile services in two version free and paid, want always to obtain the maximum number of subscription. One way to make the better publicities is to know the customers behavior, based on the behavior of each custumer some company can offer your mobile services.
But the question is: How can we know the custumers behavior ?
The answer for this question is simple, we construct a model of classification based on the client acitivities in the free services and then, we can classify if a certain custumer will subscripe or not.

# Importing Libraries
"""

import pandas as pd
from dateutil import parser
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


"""# Importing Dataset"""

dataset = pd.read_csv('appdata10.csv')

dataset.shape # the dataset is composed by 50000 rows and 12 columns

dataset.dtypes # checking the types of variables

dataset.head() # Visualizing the head of dataset

dataset['hour'] = dataset.hour.str.slice(1,3).astype(int) # the values in the column hours are object variable we need to change it into integer variable

dataset.describe() # Some descriptions about the dataset

# Analizing the Numercial variables

# We make a new dataset to analyze the numerical variables
dataset2 = dataset.copy().drop(columns = ['user', 'screen_list', 'first_open', 'enrolled', 'enrolled_date'])

dataset2.head()

# Plotting the histogram

plt.figure(figsize=(20,10))
plt.suptitle('Histograms of numerical variables', fontsize = 10,)
for i in range(1, dataset2.shape[1] + 1):

  plt.subplot(3, 3, i)
  f = plt.gca()
  f.set_title(dataset2.columns.values[i-1])
  vals = np.size(dataset2.iloc[:, i-1].unique())
  plt.hist(dataset2.iloc[:, i-1], bins= vals, color = '#3F5D7D' )

"""## Correlation Plot"""
# We want to see the correletion between numerical values and the response (enrolled 0 or 1)

dataset.corrwith(dataset.enrolled).plot.bar(figsize = (20,10),
                                            title = 'Correlation with reponse variable',
                                            fontsize = 15, rot = 45, grid = True, color = '#5F5D7D')

"""## Correlation Matrix"""
# Correletion between the numerical values

sns.set(style='white', font_scale= 1)
corr = dataset2.corr() # here we compute the correlation between numericals variables
# Generate a mask for the upper triangle
mask = np.zeros_like(corr, dtype= np.bool) # To generate a numpy array from correlation with true or false
mask[np.triu_indices_from(mask)] = True # To have the index of the upper triangle
# Setup the matplotlib figures
f, ax = plt.subplots(figsize = (20,10))
f.suptitle('Correlation Matrix', fontsize=40)
# Generate a custum diverging color map
cmap = sns.diverging_palette(10, 0, as_cmap=True)
# Draw the heatmap with the mask and the correct aspect ratio
sns.heatmap(corr, mask=mask, annot=True, cmap=cmap, vmax=1, center=0,
            square=True, linewidth=5, cbar_kws={'shrink': .5})
#### Explanation about the matrix of correlation ####

"""## Feature engineering - Response"""


# The dates are objects, we need to change it. One reason is, we can calculate the difference between the first open and the enrolled date.
# This differece can be visualised in a distribution.

"""### Transforming the dates into numerical dates"""

dataset["first_open"] = [parser.parse(row_date) for row_date in dataset["first_open"]]
dataset["enrolled_date"] = [parser.parse(row_date) if isinstance(row_date, str) else row_date for row_date in dataset["enrolled_date"]]
dataset.dtypes

# Selecting Time For Response
dataset["difference"] = (dataset.enrolled_date-dataset.first_open).astype('timedelta64[h]')

#dataset['first_open']=[parser.parser(row_data) for row_data in dataset['first_open']] # Parser convert the date
#dataset['enrolled_date']=[parser.parser(row_data) if isinstance(row_data, str) else row_data for row_data in dataset['enrolled_date']] # We utilize if because there are lines in the colums that do not have values

# Creating a new column for the difference between enrolled_date and first_open

#dataset['difference'] = (dataset.enrolled_date - dataset.first_open).astype('timedelta64[h]') # Here we chose hour as unit

# Making an histogram to visualize the relation between  the hour difference and enrolled variables. With this we can select the time for the response

response_hist = plt.hist(dataset['difference'].dropna(), color= '#3F5D7D')
plt.title('Distribution of Time-Since-Screan-Reached')


