# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xtOMgiJqSR_tQEhMPFNgNly5BWgrb2Zv
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

dataset = pd.read_csv('Combined_Cycle_Power_Plant.csv')

dataset.head()

"""# One independent variable

## AT vs PE
"""

X_11 = dataset.iloc[:, 0].values
    y_11 = dataset.iloc[:, -1].values

X_11 = X_11.reshape(len(X_11), 1)
#y_11 = y_11.reshape(len(y_11), 1)

"""### Splitting the dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_11_train, X_11_test, y_11_train, y_11_test = train_test_split(X_11, y_11,
                                                               test_size=0.2,
                                                               random_state=0)

"""### Building the models"""

# Linear Regression

from sklearn.linear_model import LinearRegression
regressor_X11_LR = LinearRegression()
regressor_X11_LR.fit(X_11_train, y_11_train)

# Polynomial

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
X11_poly_reg = PolynomialFeatures(degree = 6)
X11_poly = X11_poly_reg.fit_transform(X_11_train)
regressor_X11_PR = LinearRegression()
regressor_X11_PR.fit(X11_poly, y_11_train)

# Decision Tree

from sklearn.tree import DecisionTreeRegressor
regressor_X11_DT = DecisionTreeRegressor(random_state = 0)
regressor_X11_DT.fit(X_11_train, y_11_train)

# Random Forest

from sklearn.ensemble import RandomForestRegressor
regressor_X11_RF = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor_X11_RF.fit(X_11_train, y_11_train)

# Support Vector Machine
y_11_train = y_11_train.reshape(len(y_11_train), 1)
y_11_test = y_11_test.reshape(len(y_11_test), 1)

from sklearn.preprocessing import StandardScaler
sc_X11 = StandardScaler()
sc_y11 = StandardScaler()
X_11_train_s = sc_X11.fit_transform(X_11_train)
#X_11_test_s = sc_X11.fit(X_11_test)
y_11_train_s = sc_y11.fit_transform(y_11_train)
#y_11_test_s = sc_X11.fit(y_11_test)

from sklearn.svm import SVR
regressor_X11_SV = SVR(kernel = 'rbf')
y_11_train_s = np.ravel(y_11_train_s)
regressor_X11_SV.fit(X_11_train_s, y_11_train_s)

"""### Predicting new results"""

y_pred_11_LR = regressor_X11_LR.predict(X_11_test) # Linear Regression
#y_pred_11_PR = regressor_X11_PR.predict(X_11_test) # Polynomial Regression
y_pred_11_DT = regressor_X11_DT.predict(X_11_test) # Decision Tree
y_pred_11_RF = regressor_X11_RF.predict(X_11_test) # Random Forest
y_pred_11_SV = sc_y11.inverse_transform(regressor_X11_SV.predict(sc_X11.transform(X_11_test))) # Support Vector Machine

"""### Metrics score"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
print('Metrics results')
print('\n')

print('Linear Regression')
r2_11_LR = r2_score(y_11_test, y_pred_11_LR)
print('R2 score: {}'.format(r2_11_LR))
mae_11_LR = mean_absolute_error(y_11_test, y_pred_11_LR)
print('MAE score: {}'.format(mae_11_LR))
rmse_11_LR = np.sqrt(mean_squared_error(y_11_test, y_pred_11_LR))
print('RMSE score: {}'.format(rmse_11_LR))
print('\n')

print('Decision Tree')
r2_11_DT = r2_score(y_11_test, y_pred_11_DT)
print('R2 score: {}'.format(r2_11_DT))
mae_11_DT = mean_absolute_error(y_11_test, y_pred_11_DT)
print('MAE score: {}'.format(mae_11_DT))
rmse_11_DT = np.sqrt(mean_squared_error(y_11_test, y_pred_11_DT))
print('RMSE score: {}'.format(rmse_11_DT))
print('\n')

print('Random Forest')
r2_11_RF = r2_score(y_11_test, y_pred_11_RF)
print('R2 score: {}'.format(r2_11_RF))
mae_11_RF = mean_absolute_error(y_11_test, y_pred_11_RF)
print('MAE score: {}'.format(mae_11_RF))
rmse_11_RF = np.sqrt(mean_squared_error(y_11_test, y_pred_11_RF))
print('RMSE score: {}'.format(rmse_11_RF))
print('\n')

print('Support Vector Machine')
r2_11_SV = r2_score(y_11_test, y_pred_11_SV)
print('R2 score: {}'.format(r2_11_SV))
mae_11_SV = mean_absolute_error(y_11_test, y_pred_11_SV)
print('MAE score: {}'.format(mae_11_SV))
rmse_11_SV = np.sqrt(mean_squared_error(y_11_test, y_pred_11_SV))
print('RMSE score: {}'.format(rmse_11_SV))
print('\n')

"""### Cross Validation"""

from sklearn.metrics import SCORERS as SC
SC.keys()

from sklearn.model_selection import cross_val_score

y_11_train = np.ravel(y_11_train)

r211_LR = cross_val_score(estimator=regressor_X11_LR, X = X_11_train, y=y_11_train, cv = 10, scoring='r2')
r211_DT = cross_val_score(estimator=regressor_X11_DT, X = X_11_train, y=y_11_train, cv = 10, scoring='r2')
r211_RF = cross_val_score(estimator=regressor_X11_RF, X = X_11_train, y=y_11_train, cv = 10, scoring='r2')
r211_SV = cross_val_score(estimator=regressor_X11_SV, X = X_11_train_s, y=y_11_train_s, cv = 10, scoring='r2')

r211_SV

print('Checking Cross Validation')
print('\n')
print('Linear Regression')
print("R^2 score: {:.2f} %".format(r211_LR.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r211_LR.std()*2*100))
print('\n')
print('Decision Tree')
print("R^2 score: {:.2f} %".format(r211_DT.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r211_DT.std()*2*100))
print('\n')
print('Random Forest')
print("R^2 score: {:.2f} %".format(r211_RF.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r211_RF.std()*2*100))
print('\n')
print('Support Vector Machine')
print("R^2 score: {:.2f} %".format(r211_SV.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r211_SV.std()*2*100))

"""## V vs PE"""

X_12 = dataset['V'].values
y_12 = dataset['PE'].values

X_12 = X_12.reshape(len(X_12), 1)

"""### Splitting the dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_12_train, X_12_test, y_12_train, y_12_test = train_test_split(X_12, y_12,
                                                               test_size=0.2,
                                                               random_state=0)

"""### Building the models"""

# Linear Regression

from sklearn.linear_model import LinearRegression
regressor_X12_LR = LinearRegression()
regressor_X12_LR.fit(X_12_train, y_12_train)

# Decision Tree

from sklearn.tree import DecisionTreeRegressor
regressor_X12_DT = DecisionTreeRegressor(random_state = 0)
regressor_X12_DT.fit(X_12_train, y_12_train)

# Random Forest

from sklearn.ensemble import RandomForestRegressor
regressor_X12_RF = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor_X12_RF.fit(X_12_train, y_12_train)

# Support Vector Machine
y_12_train = y_12_train.reshape(len(y_12_train), 1)
y_12_test = y_12_test.reshape(len(y_12_test), 1)

from sklearn.preprocessing import StandardScaler
sc_X12 = StandardScaler()
sc_y12 = StandardScaler()
X_12_train_s = sc_X12.fit_transform(X_12_train)
#X_11_test_s = sc_X11.fit(X_11_test)
y_12_train_s = sc_y12.fit_transform(y_12_train)
#y_11_test_s = sc_X11.fit(y_11_test)

from sklearn.svm import SVR
regressor_X12_SV = SVR(kernel = 'rbf')
y_12_train_s = np.ravel(y_12_train_s)
regressor_X12_SV.fit(X_12_train_s, y_12_train_s)

"""### Predicting new results"""

y_pred_12_LR = regressor_X12_LR.predict(X_12_test) # Linear Regression
#y_pred_11_PR = regressor_X11_PR.predict(X_11_test) # Polynomial Regression
y_pred_12_DT = regressor_X12_DT.predict(X_12_test) # Decision Tree
y_pred_12_RF = regressor_X12_RF.predict(X_12_test) # Random Forest
y_pred_12_SV = sc_y12.inverse_transform(regressor_X12_SV.predict(sc_X12.transform(X_12_test))) # Support Vector Machine

"""### Metrics score"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
print('Metrics results')
print('\n')

print('Linear Regression')
r2_12_LR = r2_score(y_12_test, y_pred_12_LR)
print('R2 score: {}'.format(r2_12_LR))
mae_12_LR = mean_absolute_error(y_12_test, y_pred_12_LR)
print('MAE score: {}'.format(mae_12_LR))
rmse_12_LR = np.sqrt(mean_squared_error(y_12_test, y_pred_12_LR))
print('RMSE score: {}'.format(rmse_12_LR))
print('\n')

print('Decision Tree')
r2_12_DT = r2_score(y_12_test, y_pred_12_DT)
print('R2 score: {}'.format(r2_12_DT))
mae_12_DT = mean_absolute_error(y_12_test, y_pred_12_DT)
print('MAE score: {}'.format(mae_12_DT))
rmse_12_DT = np.sqrt(mean_squared_error(y_12_test, y_pred_12_DT))
print('RMSE score: {}'.format(rmse_12_DT))
print('\n')

print('Random Forest')
r2_12_RF = r2_score(y_12_test, y_pred_12_RF)
print('R2 score: {}'.format(r2_12_RF))
mae_12_RF = mean_absolute_error(y_12_test, y_pred_12_RF)
print('MAE score: {}'.format(mae_12_RF))
rmse_12_RF = np.sqrt(mean_squared_error(y_12_test, y_pred_12_RF))
print('RMSE score: {}'.format(rmse_12_RF))
print('\n')

print('Support Vector Machine')
r2_12_SV = r2_score(y_12_test, y_pred_12_SV)
print('R2 score: {}'.format(r2_12_SV))
mae_12_SV = mean_absolute_error(y_12_test, y_pred_12_SV)
print('MAE score: {}'.format(mae_12_SV))
rmse_12_SV = np.sqrt(mean_squared_error(y_12_test, y_pred_12_SV))
print('RMSE score: {}'.format(rmse_12_SV))
print('\n')

"""### Cross Validation"""

from sklearn.model_selection import cross_val_score

y_12_train = np.ravel(y_12_train)

r212_LR = cross_val_score(estimator=regressor_X12_LR, X = X_12_train, y=y_12_train, cv = 10, scoring='r2')
r212_DT = cross_val_score(estimator=regressor_X12_DT, X = X_12_train, y=y_12_train, cv = 10, scoring='r2')
r212_RF = cross_val_score(estimator=regressor_X12_RF, X = X_12_train, y=y_12_train, cv = 10, scoring='r2')
r212_SV = cross_val_score(estimator=regressor_X12_SV, X = X_12_train_s, y=y_12_train_s, cv = 10, scoring='r2')

r212_SV

print('Checking Cross Validation')
print('\n')
print('Linear Regression')
print("R^2 score: {:.2f} %".format(r212_LR.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r212_LR.std()*2*100))
print('\n')
print('Decision Tree')
print("R^2 score: {:.2f} %".format(r212_DT.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r212_DT.std()*2*100))
print('\n')
print('Random Forest')
print("R^2 score: {:.2f} %".format(r212_RF.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r212_RF.std()*2*100))
print('\n')
print('Support Vector Machine')
print("R^2 score: {:.2f} %".format(r212_SV.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r212_SV.std()*2*100))

"""## AP vs PE"""

X_13 = dataset['AP'].values
y_13 = dataset['PE'].values

X_13 = X_13.reshape(len(X_13), 1)

"""### Splitting the dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_13_train, X_13_test, y_13_train, y_13_test = train_test_split(X_13, y_13,
                                                               test_size=0.2,
                                                               random_state=0)

"""### Building the models"""

# Linear Regression

from sklearn.linear_model import LinearRegression
regressor_X13_LR = LinearRegression()
regressor_X13_LR.fit(X_13_train, y_13_train)

# Decision Tree

from sklearn.tree import DecisionTreeRegressor
regressor_X13_DT = DecisionTreeRegressor(random_state = 0)
regressor_X13_DT.fit(X_13_train, y_13_train)

# Random Forest

from sklearn.ensemble import RandomForestRegressor
regressor_X13_RF = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor_X13_RF.fit(X_13_train, y_13_train)

# Support Vector Machine
y_13_train = y_13_train.reshape(len(y_13_train), 1)
y_13_test = y_13_test.reshape(len(y_13_test), 1)

from sklearn.preprocessing import StandardScaler
sc_X13 = StandardScaler()
sc_y13 = StandardScaler()
X_13_train_s = sc_X13.fit_transform(X_13_train)
#X_11_test_s = sc_X11.fit(X_11_test)
y_13_train_s = sc_y13.fit_transform(y_13_train)
#y_11_test_s = sc_X11.fit(y_11_test)

from sklearn.svm import SVR
regressor_X13_SV = SVR(kernel = 'rbf')
y_13_train_s = np.ravel(y_13_train_s)
regressor_X13_SV.fit(X_13_train_s, y_13_train_s)

"""### Predicting new results"""

y_pred_13_LR = regressor_X13_LR.predict(X_13_test) # Linear Regression
#y_pred_11_PR = regressor_X11_PR.predict(X_11_test) # Polynomial Regression
y_pred_13_DT = regressor_X13_DT.predict(X_13_test) # Decision Tree
y_pred_13_RF = regressor_X13_RF.predict(X_13_test) # Random Forest
y_pred_13_SV = sc_y13.inverse_transform(regressor_X13_SV.predict(sc_X13.transform(X_13_test))) # Support Vector Machine

"""### Metrics score"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
print('Metrics results')
print('\n')

print('Linear Regression')
r2_13_LR = r2_score(y_13_test, y_pred_13_LR)
print('R2 score: {}'.format(r2_13_LR))
mae_13_LR = mean_absolute_error(y_13_test, y_pred_13_LR)
print('MAE score: {}'.format(mae_13_LR))
rmse_13_LR = np.sqrt(mean_squared_error(y_13_test, y_pred_13_LR))
print('RMSE score: {}'.format(rmse_13_LR))
print('\n')

print('Decision Tree')
r2_13_DT = r2_score(y_13_test, y_pred_13_DT)
print('R2 score: {}'.format(r2_13_DT))
mae_13_DT = mean_absolute_error(y_13_test, y_pred_13_DT)
print('MAE score: {}'.format(mae_13_DT))
rmse_13_DT = np.sqrt(mean_squared_error(y_13_test, y_pred_13_DT))
print('RMSE score: {}'.format(rmse_13_DT))
print('\n')

print('Random Forest')
r2_13_RF = r2_score(y_13_test, y_pred_13_RF)
print('R2 score: {}'.format(r2_13_RF))
mae_13_RF = mean_absolute_error(y_13_test, y_pred_13_RF)
print('MAE score: {}'.format(mae_13_RF))
rmse_13_RF = np.sqrt(mean_squared_error(y_13_test, y_pred_13_RF))
print('RMSE score: {}'.format(rmse_13_RF))
print('\n')

print('Support Vector Machine')
r2_13_SV = r2_score(y_13_test, y_pred_13_SV)
print('R2 score: {}'.format(r2_13_SV))
mae_13_SV = mean_absolute_error(y_13_test, y_pred_13_SV)
print('MAE score: {}'.format(mae_13_SV))
rmse_13_SV = np.sqrt(mean_squared_error(y_13_test, y_pred_13_SV))
print('RMSE score: {}'.format(rmse_13_SV))
print('\n')

"""### Cross Validation"""

from sklearn.model_selection import cross_val_score
y_13_train = np.ravel(y_13_train)

r213_LR = cross_val_score(estimator=regressor_X13_LR, X = X_13_train, y=y_13_train, cv = 10, scoring='r2')
r213_DT = cross_val_score(estimator=regressor_X13_DT, X = X_13_train, y=y_13_train, cv = 10, scoring='r2')
r213_RF = cross_val_score(estimator=regressor_X13_RF, X = X_13_train, y=y_13_train, cv = 10, scoring='r2')
r213_SV = cross_val_score(estimator=regressor_X13_SV, X = X_13_train_s, y=y_13_train_s, cv = 10, scoring='r2')

r213_SV

print('Checking Cross Validation')
print('\n')
print('Linear Regression')
print("R^2 score: {:.2f} %".format(r213_LR.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r213_LR.std()*2*100))
print('\n')
print('Decision Tree')
print("R^2 score: {:.2f} %".format(r213_DT.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r213_DT.std()*2*100))
print('\n')
print('Random Forest')
print("R^2 score: {:.2f} %".format(r213_RF.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r213_RF.std()*2*100))
print('\n')
print('Support Vector Machine')
print("R^2 score: {:.2f} %".format(r213_SV.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r213_SV.std()*2*100))

"""## RH vs PE"""

X_14 = dataset['RH'].values
y_14 = dataset['PE'].values

X_14 = X_14.reshape(len(X_14), 1)

"""### Splitting the dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_14_train, X_14_test, y_14_train, y_14_test = train_test_split(X_14, y_14,
                                                               test_size=0.2,
                                                               random_state=0)

"""### Building the models"""

# Linear Regression

from sklearn.linear_model import LinearRegression
regressor_X14_LR = LinearRegression()
regressor_X14_LR.fit(X_14_train, y_14_train)

# Decision Tree

from sklearn.tree import DecisionTreeRegressor
regressor_X14_DT = DecisionTreeRegressor(random_state = 0)
regressor_X14_DT.fit(X_14_train, y_14_train)

# Random Forest

from sklearn.ensemble import RandomForestRegressor
regressor_X14_RF = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor_X14_RF.fit(X_14_train, y_14_train)

# Support Vector Machine
y_14_train = y_14_train.reshape(len(y_14_train), 1)
y_14_test = y_14_test.reshape(len(y_14_test), 1)

from sklearn.preprocessing import StandardScaler
sc_X14 = StandardScaler()
sc_y14 = StandardScaler()
X_14_train_s = sc_X14.fit_transform(X_14_train)
#X_11_test_s = sc_X11.fit(X_11_test)
y_14_train_s = sc_y14.fit_transform(y_14_train)
#y_11_test_s = sc_X11.fit(y_11_test)

from sklearn.svm import SVR
regressor_X14_SV = SVR(kernel = 'rbf')
y_14_train_s = np.ravel(y_14_train_s)
regressor_X14_SV.fit(X_14_train_s, y_14_train_s)

"""### Predicting new results"""

y_pred_14_LR = regressor_X14_LR.predict(X_14_test) # Linear Regression
#y_pred_11_PR = regressor_X11_PR.predict(X_11_test) # Polynomial Regression
y_pred_14_DT = regressor_X14_DT.predict(X_14_test) # Decision Tree
y_pred_14_RF = regressor_X14_RF.predict(X_14_test) # Random Forest
y_pred_14_SV = sc_y14.inverse_transform(regressor_X14_SV.predict(sc_X14.transform(X_14_test))) # Support Vector Machine

"""### Metrics score"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
print('Metrics results')
print('\n')

print('Linear Regression')
r2_14_LR = r2_score(y_14_test, y_pred_14_LR)
print('R2 score: {}'.format(r2_14_LR))
mae_14_LR = mean_absolute_error(y_14_test, y_pred_14_LR)
print('MAE score: {}'.format(mae_14_LR))
rmse_14_LR = np.sqrt(mean_squared_error(y_14_test, y_pred_14_LR))
print('RMSE score: {}'.format(rmse_14_LR))
print('\n')

print('Decision Tree')
r2_14_DT = r2_score(y_14_test, y_pred_14_DT)
print('R2 score: {}'.format(r2_14_DT))
mae_14_DT = mean_absolute_error(y_14_test, y_pred_14_DT)
print('MAE score: {}'.format(mae_14_DT))
rmse_14_DT = np.sqrt(mean_squared_error(y_14_test, y_pred_14_DT))
print('RMSE score: {}'.format(rmse_14_DT))
print('\n')

print('Random Forest')
r2_14_RF = r2_score(y_14_test, y_pred_14_RF)
print('R2 score: {}'.format(r2_14_RF))
mae_14_RF = mean_absolute_error(y_14_test, y_pred_14_RF)
print('MAE score: {}'.format(mae_14_RF))
rmse_14_RF = np.sqrt(mean_squared_error(y_14_test, y_pred_14_RF))
print('RMSE score: {}'.format(rmse_14_RF))
print('\n')

print('Support Vector Machine')
r2_14_SV = r2_score(y_14_test, y_pred_14_SV)
print('R2 score: {}'.format(r2_14_SV))
mae_14_SV = mean_absolute_error(y_14_test, y_pred_14_SV)
print('MAE score: {}'.format(mae_14_SV))
rmse_14_SV = np.sqrt(mean_squared_error(y_14_test, y_pred_14_SV))
print('RMSE score: {}'.format(rmse_14_SV))
print('\n')

"""### Cross Validation"""

from sklearn.model_selection import cross_val_score

y_14_train = np.ravel(y_14_train)

r214_LR = cross_val_score(estimator=regressor_X14_LR, X = X_14_train, y=y_14_train, cv = 10, scoring='r2')
r214_DT = cross_val_score(estimator=regressor_X14_DT, X = X_14_train, y=y_14_train, cv = 10, scoring='r2')
r214_RF = cross_val_score(estimator=regressor_X14_RF, X = X_14_train, y=y_14_train, cv = 10, scoring='r2')
r214_SV = cross_val_score(estimator=regressor_X14_SV, X = X_14_train_s, y=y_14_train_s, cv = 10, scoring='r2')

print('Checking Cross Validation')
print('\n')
print('Linear Regression')
print("R^2 score: {:.2f} %".format(r214_LR.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r214_LR.std()*2*100))
print('\n')
print('Decision Tree')
print("R^2 score: {:.2f} %".format(r214_DT.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r214_DT.std()*2*100))
print('\n')
print('Random Forest')
print("R^2 score: {:.2f} %".format(r214_RF.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r214_RF.std()*2*100))
print('\n')
print('Support Vector Machine')
print("R^2 score: {:.2f} %".format(r214_SV.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r214_SV.std()*2*100))

"""## Two independent variables

## AP-V vs PE
"""

X_21 = dataset.iloc[:, 1:3].values
y_21 = dataset['PE'].values

"""### Splitting the dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_21_train, X_21_test, y_21_train, y_21_test = train_test_split(X_21, y_21,
                                                               test_size=0.2,
                                                               random_state=0)

"""### Building the models"""

# Linear Regression

from sklearn.linear_model import LinearRegression
regressor_X21_LR = LinearRegression()
regressor_X21_LR.fit(X_21_train, y_21_train)

# Decision Tree

from sklearn.tree import DecisionTreeRegressor
regressor_X21_DT = DecisionTreeRegressor(random_state = 0)
regressor_X21_DT.fit(X_21_train, y_21_train)

# Random Forest

from sklearn.ensemble import RandomForestRegressor
regressor_X21_RF = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor_X21_RF.fit(X_21_train, y_21_train)

# Support Vector Machine
y_21_train = y_21_train.reshape(len(y_11_train), 1)
y_21_test = y_21_test.reshape(len(y_21_test), 1)

from sklearn.preprocessing import StandardScaler
sc_X21 = StandardScaler()
sc_y21 = StandardScaler()
X_21_train_s = sc_X21.fit_transform(X_21_train)
#X_11_test_s = sc_X11.fit(X_11_test)
y_21_train_s = sc_y21.fit_transform(y_21_train)
#y_11_test_s = sc_X11.fit(y_11_test)

from sklearn.svm import SVR
regressor_X21_SV = SVR(kernel = 'rbf')
y_21_train_s = np.ravel(y_21_train_s)
regressor_X21_SV.fit(X_21_train_s, y_21_train_s)

"""### Predicting new results"""

y_pred_21_LR = regressor_X21_LR.predict(X_21_test) # Linear Regression
#y_pred_11_PR = regressor_X11_PR.predict(X_11_test) # Polynomial Regression
y_pred_21_DT = regressor_X21_DT.predict(X_21_test) # Decision Tree
y_pred_21_RF = regressor_X21_RF.predict(X_21_test) # Random Forest
y_pred_21_SV = sc_y21.inverse_transform(regressor_X21_SV.predict(sc_X21.transform(X_21_test))) # Support Vector Machine

"""### Metrics Score"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
print('Metrics results')
print('\n')

print('Linear Regression')
r2_21_LR = r2_score(y_21_test, y_pred_21_LR)
print('R2 score: {}'.format(r2_21_LR))
mae_21_LR = mean_absolute_error(y_21_test, y_pred_21_LR)
print('MAE score: {}'.format(mae_21_LR))
rmse_21_LR = np.sqrt(mean_squared_error(y_21_test, y_pred_21_LR))
print('RMSE score: {}'.format(rmse_21_LR))
print('\n')

print('Decision Tree')
r2_21_DT = r2_score(y_21_test, y_pred_21_DT)
print('R2 score: {}'.format(r2_21_DT))
mae_21_DT = mean_absolute_error(y_21_test, y_pred_21_DT)
print('MAE score: {}'.format(mae_21_DT))
rmse_21_DT = np.sqrt(mean_squared_error(y_21_test, y_pred_21_DT))
print('RMSE score: {}'.format(rmse_21_DT))
print('\n')

print('Random Forest')
r2_21_RF = r2_score(y_21_test, y_pred_21_RF)
print('R2 score: {}'.format(r2_21_RF))
mae_21_RF = mean_absolute_error(y_21_test, y_pred_21_RF)
print('MAE score: {}'.format(mae_21_RF))
rmse_21_RF = np.sqrt(mean_squared_error(y_21_test, y_pred_21_RF))
print('RMSE score: {}'.format(rmse_21_RF))
print('\n')

print('Support Vector Machine')
r2_21_SV = r2_score(y_21_test, y_pred_21_SV)
print('R2 score: {}'.format(r2_21_SV))
mae_21_SV = mean_absolute_error(y_21_test, y_pred_21_SV)
print('MAE score: {}'.format(mae_21_SV))
rmse_21_SV = np.sqrt(mean_squared_error(y_21_test, y_pred_21_SV))
print('RMSE score: {}'.format(rmse_21_SV))
print('\n')

"""## AT-AP vs PE"""

X_22 = dataset.iloc[:, 0:3:2].values
y_22 = dataset['PE'].values

"""### Splitting the dataset into training and test set"""

from sklearn.model_selection import train_test_split
X_22_train, X_22_test, y_22_train, y_22_test = train_test_split(X_22, y_22,
                                                               test_size=0.2,
                                                               random_state=0)

"""### Building the models"""

# Linear Regression

from sklearn.linear_model import LinearRegression
regressor_X22_LR = LinearRegression()
regressor_X22_LR.fit(X_22_train, y_22_train)

# Decision Tree

from sklearn.tree import DecisionTreeRegressor
regressor_X22_DT = DecisionTreeRegressor(random_state = 0)
regressor_X22_DT.fit(X_22_train, y_22_train)

# Random Forest

from sklearn.ensemble import RandomForestRegressor
regressor_X22_RF = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor_X22_RF.fit(X_22_train, y_22_train)

# Support Vector Machine
y_22_train = y_22_train.reshape(len(y_22_train), 1)
y_22_test = y_22_test.reshape(len(y_22_test), 1)

from sklearn.preprocessing import StandardScaler
sc_X22 = StandardScaler()
sc_y22 = StandardScaler()
X_22_train_s = sc_X22.fit_transform(X_22_train)
#X_11_test_s = sc_X11.fit(X_11_test)
y_22_train_s = sc_y22.fit_transform(y_22_train)
#y_11_test_s = sc_X11.fit(y_11_test)

from sklearn.svm import SVR
regressor_X22_SV = SVR(kernel = 'rbf')
y_22_train_s = np.ravel(y_22_train_s)
regressor_X22_SV.fit(X_22_train_s, y_22_train_s)

"""### Predicting new results"""

y_pred_22_LR = regressor_X22_LR.predict(X_22_test) # Linear Regression
#y_pred_11_PR = regressor_X11_PR.predict(X_11_test) # Polynomial Regression
y_pred_22_DT = regressor_X22_DT.predict(X_22_test) # Decision Tree
y_pred_22_RF = regressor_X22_RF.predict(X_22_test) # Random Forest
y_pred_22_SV = sc_y22.inverse_transform(regressor_X22_SV.predict(sc_X22.transform(X_22_test))) # Support Vector Machine

"""### Metrics Score"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
print('Metrics results')
print('\n')

print('Linear Regression')
r2_22_LR = r2_score(y_22_test, y_pred_22_LR)
print('R2 score: {}'.format(r2_22_LR))
mae_22_LR = mean_absolute_error(y_22_test, y_pred_22_LR)
print('MAE score: {}'.format(mae_22_LR))
rmse_22_LR = np.sqrt(mean_squared_error(y_22_test, y_pred_22_LR))
print('RMSE score: {}'.format(rmse_22_LR))
print('\n')

print('Decision Tree')
r2_22_DT = r2_score(y_22_test, y_pred_22_DT)
print('R2 score: {}'.format(r2_22_DT))
mae_22_DT = mean_absolute_error(y_22_test, y_pred_22_DT)
print('MAE score: {}'.format(mae_22_DT))
rmse_22_DT = np.sqrt(mean_squared_error(y_22_test, y_pred_22_DT))
print('RMSE score: {}'.format(rmse_22_DT))
print('\n')

print('Random Forest')
r2_22_RF = r2_score(y_22_test, y_pred_22_RF)
print('R2 score: {}'.format(r2_22_RF))
mae_22_RF = mean_absolute_error(y_22_test, y_pred_22_RF)
print('MAE score: {}'.format(mae_22_RF))
rmse_22_RF = np.sqrt(mean_squared_error(y_22_test, y_pred_22_RF))
print('RMSE score: {}'.format(rmse_22_RF))
print('\n')

print('Support Vector Machine')
r2_22_SV = r2_score(y_22_test, y_pred_22_SV)
print('R2 score: {}'.format(r2_22_SV))
mae_22_SV = mean_absolute_error(y_22_test, y_pred_22_SV)
print('MAE score: {}'.format(mae_22_SV))
rmse_22_SV = np.sqrt(mean_squared_error(y_22_test, y_pred_22_SV))
print('RMSE score: {}'.format(rmse_22_SV))
print('\n')

"""### Cross Validation"""

from sklearn.model_selection import cross_val_score

y_22_train = np.ravel(y_22_train)

r222_LR = cross_val_score(estimator=regressor_X22_LR, X = X_22_train, y=y_22_train, cv = 10, scoring='r2')
r222_DT = cross_val_score(estimator=regressor_X22_DT, X = X_22_train, y=y_22_train, cv = 10, scoring='r2')
r222_RF = cross_val_score(estimator=regressor_X22_RF, X = X_22_train, y=y_22_train, cv = 10, scoring='r2')
r222_SV = cross_val_score(estimator=regressor_X22_SV, X = X_22_train_s, y=y_22_train_s, cv = 10, scoring='r2')

r222_SV

print('Checking Cross Validation')
print('\n')
print('Linear Regression')
print("R^2 score: {:.2f} %".format(r222_LR.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r222_LR.std()*2*100))
print('\n')
print('Decision Tree')
print("R^2 score: {:.2f} %".format(r222_DT.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r222_DT.std()*2*100))
print('\n')
print('Random Forest')
print("R^2 score: {:.2f} %".format(r222_RF.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r222_RF.std()*2*100))
print('\n')
print('Support Vector Machine')
print("R^2 score: {:.2f} %".format(r222_SV.mean()*100))
print("Standard Deviation (+/-): {:.2f} %".format(r222_SV.std()*2*100))

"""## AT-RH vs PE"""































